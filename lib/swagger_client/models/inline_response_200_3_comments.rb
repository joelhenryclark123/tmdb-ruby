=begin
#TMDB API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.51
=end

require 'date'

module SwaggerClient
  class InlineResponse2003Comments
    attr_accessor :movie617127

    attr_accessor :movie986056

    attr_accessor :movie822119

    attr_accessor :movie533535

    attr_accessor :movie609681

    attr_accessor :movie447365

    attr_accessor :movie640146

    attr_accessor :movie505642

    attr_accessor :movie616037

    attr_accessor :movie453395

    attr_accessor :movie634649

    attr_accessor :movie524434

    attr_accessor :movie566525

    attr_accessor :movie497698

    attr_accessor :movie429617

    attr_accessor :movie299534

    attr_accessor :movie299537

    attr_accessor :movie363088

    attr_accessor :movie299536

    attr_accessor :movie284054

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'movie617127' => :'movie:617127',
        :'movie986056' => :'movie:986056',
        :'movie822119' => :'movie:822119',
        :'movie533535' => :'movie:533535',
        :'movie609681' => :'movie:609681',
        :'movie447365' => :'movie:447365',
        :'movie640146' => :'movie:640146',
        :'movie505642' => :'movie:505642',
        :'movie616037' => :'movie:616037',
        :'movie453395' => :'movie:453395',
        :'movie634649' => :'movie:634649',
        :'movie524434' => :'movie:524434',
        :'movie566525' => :'movie:566525',
        :'movie497698' => :'movie:497698',
        :'movie429617' => :'movie:429617',
        :'movie299534' => :'movie:299534',
        :'movie299537' => :'movie:299537',
        :'movie363088' => :'movie:363088',
        :'movie299536' => :'movie:299536',
        :'movie284054' => :'movie:284054'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'movie617127' => :'Object',
        :'movie986056' => :'Object',
        :'movie822119' => :'Object',
        :'movie533535' => :'Object',
        :'movie609681' => :'Object',
        :'movie447365' => :'Object',
        :'movie640146' => :'Object',
        :'movie505642' => :'Object',
        :'movie616037' => :'Object',
        :'movie453395' => :'Object',
        :'movie634649' => :'Object',
        :'movie524434' => :'Object',
        :'movie566525' => :'Object',
        :'movie497698' => :'Object',
        :'movie429617' => :'Object',
        :'movie299534' => :'Object',
        :'movie299537' => :'Object',
        :'movie363088' => :'Object',
        :'movie299536' => :'Object',
        :'movie284054' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse2003Comments` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse2003Comments`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'movie617127')
        self.movie617127 = attributes[:'movie617127']
      end

      if attributes.key?(:'movie986056')
        self.movie986056 = attributes[:'movie986056']
      end

      if attributes.key?(:'movie822119')
        self.movie822119 = attributes[:'movie822119']
      end

      if attributes.key?(:'movie533535')
        self.movie533535 = attributes[:'movie533535']
      end

      if attributes.key?(:'movie609681')
        self.movie609681 = attributes[:'movie609681']
      end

      if attributes.key?(:'movie447365')
        self.movie447365 = attributes[:'movie447365']
      end

      if attributes.key?(:'movie640146')
        self.movie640146 = attributes[:'movie640146']
      end

      if attributes.key?(:'movie505642')
        self.movie505642 = attributes[:'movie505642']
      end

      if attributes.key?(:'movie616037')
        self.movie616037 = attributes[:'movie616037']
      end

      if attributes.key?(:'movie453395')
        self.movie453395 = attributes[:'movie453395']
      end

      if attributes.key?(:'movie634649')
        self.movie634649 = attributes[:'movie634649']
      end

      if attributes.key?(:'movie524434')
        self.movie524434 = attributes[:'movie524434']
      end

      if attributes.key?(:'movie566525')
        self.movie566525 = attributes[:'movie566525']
      end

      if attributes.key?(:'movie497698')
        self.movie497698 = attributes[:'movie497698']
      end

      if attributes.key?(:'movie429617')
        self.movie429617 = attributes[:'movie429617']
      end

      if attributes.key?(:'movie299534')
        self.movie299534 = attributes[:'movie299534']
      end

      if attributes.key?(:'movie299537')
        self.movie299537 = attributes[:'movie299537']
      end

      if attributes.key?(:'movie363088')
        self.movie363088 = attributes[:'movie363088']
      end

      if attributes.key?(:'movie299536')
        self.movie299536 = attributes[:'movie299536']
      end

      if attributes.key?(:'movie284054')
        self.movie284054 = attributes[:'movie284054']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          movie617127 == o.movie617127 &&
          movie986056 == o.movie986056 &&
          movie822119 == o.movie822119 &&
          movie533535 == o.movie533535 &&
          movie609681 == o.movie609681 &&
          movie447365 == o.movie447365 &&
          movie640146 == o.movie640146 &&
          movie505642 == o.movie505642 &&
          movie616037 == o.movie616037 &&
          movie453395 == o.movie453395 &&
          movie634649 == o.movie634649 &&
          movie524434 == o.movie524434 &&
          movie566525 == o.movie566525 &&
          movie497698 == o.movie497698 &&
          movie429617 == o.movie429617 &&
          movie299534 == o.movie299534 &&
          movie299537 == o.movie299537 &&
          movie363088 == o.movie363088 &&
          movie299536 == o.movie299536 &&
          movie284054 == o.movie284054
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [movie617127, movie986056, movie822119, movie533535, movie609681, movie447365, movie640146, movie505642, movie616037, movie453395, movie634649, movie524434, movie566525, movie497698, movie429617, movie299534, movie299537, movie363088, movie299536, movie284054].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
