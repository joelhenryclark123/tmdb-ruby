=begin
#TMDB API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.51
=end

require 'date'

module SwaggerClient
  class InlineResponse20055
    attr_accessor :adult

    attr_accessor :backdrop_path

    attr_accessor :belongs_to_collection

    attr_accessor :budget

    attr_accessor :genres

    attr_accessor :homepage

    attr_accessor :id

    attr_accessor :imdb_id

    attr_accessor :original_language

    attr_accessor :original_title

    attr_accessor :overview

    attr_accessor :popularity

    attr_accessor :poster_path

    attr_accessor :production_companies

    attr_accessor :production_countries

    attr_accessor :release_date

    attr_accessor :revenue

    attr_accessor :runtime

    attr_accessor :spoken_languages

    attr_accessor :status

    attr_accessor :tagline

    attr_accessor :title

    attr_accessor :video

    attr_accessor :vote_average

    attr_accessor :vote_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'adult' => :'adult',
        :'backdrop_path' => :'backdrop_path',
        :'belongs_to_collection' => :'belongs_to_collection',
        :'budget' => :'budget',
        :'genres' => :'genres',
        :'homepage' => :'homepage',
        :'id' => :'id',
        :'imdb_id' => :'imdb_id',
        :'original_language' => :'original_language',
        :'original_title' => :'original_title',
        :'overview' => :'overview',
        :'popularity' => :'popularity',
        :'poster_path' => :'poster_path',
        :'production_companies' => :'production_companies',
        :'production_countries' => :'production_countries',
        :'release_date' => :'release_date',
        :'revenue' => :'revenue',
        :'runtime' => :'runtime',
        :'spoken_languages' => :'spoken_languages',
        :'status' => :'status',
        :'tagline' => :'tagline',
        :'title' => :'title',
        :'video' => :'video',
        :'vote_average' => :'vote_average',
        :'vote_count' => :'vote_count'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'adult' => :'Object',
        :'backdrop_path' => :'Object',
        :'belongs_to_collection' => :'Object',
        :'budget' => :'Object',
        :'genres' => :'Object',
        :'homepage' => :'Object',
        :'id' => :'Object',
        :'imdb_id' => :'Object',
        :'original_language' => :'Object',
        :'original_title' => :'Object',
        :'overview' => :'Object',
        :'popularity' => :'Object',
        :'poster_path' => :'Object',
        :'production_companies' => :'Object',
        :'production_countries' => :'Object',
        :'release_date' => :'Object',
        :'revenue' => :'Object',
        :'runtime' => :'Object',
        :'spoken_languages' => :'Object',
        :'status' => :'Object',
        :'tagline' => :'Object',
        :'title' => :'Object',
        :'video' => :'Object',
        :'vote_average' => :'Object',
        :'vote_count' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse20055` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse20055`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'adult')
        self.adult = attributes[:'adult']
      end

      if attributes.key?(:'backdrop_path')
        self.backdrop_path = attributes[:'backdrop_path']
      end

      if attributes.key?(:'belongs_to_collection')
        self.belongs_to_collection = attributes[:'belongs_to_collection']
      end

      if attributes.key?(:'budget')
        self.budget = attributes[:'budget']
      end

      if attributes.key?(:'genres')
        self.genres = attributes[:'genres']
      end

      if attributes.key?(:'homepage')
        self.homepage = attributes[:'homepage']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'imdb_id')
        self.imdb_id = attributes[:'imdb_id']
      end

      if attributes.key?(:'original_language')
        self.original_language = attributes[:'original_language']
      end

      if attributes.key?(:'original_title')
        self.original_title = attributes[:'original_title']
      end

      if attributes.key?(:'overview')
        self.overview = attributes[:'overview']
      end

      if attributes.key?(:'popularity')
        self.popularity = attributes[:'popularity']
      end

      if attributes.key?(:'poster_path')
        self.poster_path = attributes[:'poster_path']
      end

      if attributes.key?(:'production_companies')
        self.production_companies = attributes[:'production_companies']
      end

      if attributes.key?(:'production_countries')
        self.production_countries = attributes[:'production_countries']
      end

      if attributes.key?(:'release_date')
        self.release_date = attributes[:'release_date']
      end

      if attributes.key?(:'revenue')
        self.revenue = attributes[:'revenue']
      end

      if attributes.key?(:'runtime')
        self.runtime = attributes[:'runtime']
      end

      if attributes.key?(:'spoken_languages')
        self.spoken_languages = attributes[:'spoken_languages']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tagline')
        self.tagline = attributes[:'tagline']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'video')
        self.video = attributes[:'video']
      end

      if attributes.key?(:'vote_average')
        self.vote_average = attributes[:'vote_average']
      end

      if attributes.key?(:'vote_count')
        self.vote_count = attributes[:'vote_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          adult == o.adult &&
          backdrop_path == o.backdrop_path &&
          belongs_to_collection == o.belongs_to_collection &&
          budget == o.budget &&
          genres == o.genres &&
          homepage == o.homepage &&
          id == o.id &&
          imdb_id == o.imdb_id &&
          original_language == o.original_language &&
          original_title == o.original_title &&
          overview == o.overview &&
          popularity == o.popularity &&
          poster_path == o.poster_path &&
          production_companies == o.production_companies &&
          production_countries == o.production_countries &&
          release_date == o.release_date &&
          revenue == o.revenue &&
          runtime == o.runtime &&
          spoken_languages == o.spoken_languages &&
          status == o.status &&
          tagline == o.tagline &&
          title == o.title &&
          video == o.video &&
          vote_average == o.vote_average &&
          vote_count == o.vote_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [adult, backdrop_path, belongs_to_collection, budget, genres, homepage, id, imdb_id, original_language, original_title, overview, popularity, poster_path, production_companies, production_countries, release_date, revenue, runtime, spoken_languages, status, tagline, title, video, vote_average, vote_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
