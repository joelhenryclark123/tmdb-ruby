=begin
#TMDB API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.51
=end

require 'date'

module SwaggerClient
  class InlineResponse200120Results
    attr_accessor :ae

    attr_accessor :ar

    attr_accessor :at

    attr_accessor :au

    attr_accessor :ba

    attr_accessor :bb

    attr_accessor :be

    attr_accessor :bg

    attr_accessor :bo

    attr_accessor :br

    attr_accessor :bs

    attr_accessor :ca

    attr_accessor :ch

    attr_accessor :ci

    attr_accessor :cl

    attr_accessor :co

    attr_accessor :cr

    attr_accessor :cz

    attr_accessor :de

    attr_accessor :dk

    attr_accessor :_do

    attr_accessor :dz

    attr_accessor :ec

    attr_accessor :eg

    attr_accessor :es

    attr_accessor :fi

    attr_accessor :fr

    attr_accessor :gb

    attr_accessor :gf

    attr_accessor :gh

    attr_accessor :gq

    attr_accessor :gt

    attr_accessor :hk

    attr_accessor :hn

    attr_accessor :hr

    attr_accessor :hu

    attr_accessor :id

    attr_accessor :ie

    attr_accessor :il

    attr_accessor :iq

    attr_accessor :it

    attr_accessor :jm

    attr_accessor :jp

    attr_accessor :ke

    attr_accessor :kr

    attr_accessor :lb

    attr_accessor :ly

    attr_accessor :md

    attr_accessor :mk

    attr_accessor :mu

    attr_accessor :mx

    attr_accessor :my

    attr_accessor :mz

    attr_accessor :ne

    attr_accessor :ng

    attr_accessor :nl

    attr_accessor :no

    attr_accessor :nz

    attr_accessor :pa

    attr_accessor :pe

    attr_accessor :ph

    attr_accessor :pl

    attr_accessor :ps

    attr_accessor :pt

    attr_accessor :py

    attr_accessor :ro

    attr_accessor :rs

    attr_accessor :ru

    attr_accessor :sa

    attr_accessor :sc

    attr_accessor :se

    attr_accessor :sg

    attr_accessor :si

    attr_accessor :sk

    attr_accessor :sn

    attr_accessor :sv

    attr_accessor :th

    attr_accessor :tr

    attr_accessor :tt

    attr_accessor :tw

    attr_accessor :tz

    attr_accessor :ug

    attr_accessor :us

    attr_accessor :uy

    attr_accessor :ve

    attr_accessor :za

    attr_accessor :zm

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ae' => :'AE',
        :'ar' => :'AR',
        :'at' => :'AT',
        :'au' => :'AU',
        :'ba' => :'BA',
        :'bb' => :'BB',
        :'be' => :'BE',
        :'bg' => :'BG',
        :'bo' => :'BO',
        :'br' => :'BR',
        :'bs' => :'BS',
        :'ca' => :'CA',
        :'ch' => :'CH',
        :'ci' => :'CI',
        :'cl' => :'CL',
        :'co' => :'CO',
        :'cr' => :'CR',
        :'cz' => :'CZ',
        :'de' => :'DE',
        :'dk' => :'DK',
        :'_do' => :'DO',
        :'dz' => :'DZ',
        :'ec' => :'EC',
        :'eg' => :'EG',
        :'es' => :'ES',
        :'fi' => :'FI',
        :'fr' => :'FR',
        :'gb' => :'GB',
        :'gf' => :'GF',
        :'gh' => :'GH',
        :'gq' => :'GQ',
        :'gt' => :'GT',
        :'hk' => :'HK',
        :'hn' => :'HN',
        :'hr' => :'HR',
        :'hu' => :'HU',
        :'id' => :'ID',
        :'ie' => :'IE',
        :'il' => :'IL',
        :'iq' => :'IQ',
        :'it' => :'IT',
        :'jm' => :'JM',
        :'jp' => :'JP',
        :'ke' => :'KE',
        :'kr' => :'KR',
        :'lb' => :'LB',
        :'ly' => :'LY',
        :'md' => :'MD',
        :'mk' => :'MK',
        :'mu' => :'MU',
        :'mx' => :'MX',
        :'my' => :'MY',
        :'mz' => :'MZ',
        :'ne' => :'NE',
        :'ng' => :'NG',
        :'nl' => :'NL',
        :'no' => :'NO',
        :'nz' => :'NZ',
        :'pa' => :'PA',
        :'pe' => :'PE',
        :'ph' => :'PH',
        :'pl' => :'PL',
        :'ps' => :'PS',
        :'pt' => :'PT',
        :'py' => :'PY',
        :'ro' => :'RO',
        :'rs' => :'RS',
        :'ru' => :'RU',
        :'sa' => :'SA',
        :'sc' => :'SC',
        :'se' => :'SE',
        :'sg' => :'SG',
        :'si' => :'SI',
        :'sk' => :'SK',
        :'sn' => :'SN',
        :'sv' => :'SV',
        :'th' => :'TH',
        :'tr' => :'TR',
        :'tt' => :'TT',
        :'tw' => :'TW',
        :'tz' => :'TZ',
        :'ug' => :'UG',
        :'us' => :'US',
        :'uy' => :'UY',
        :'ve' => :'VE',
        :'za' => :'ZA',
        :'zm' => :'ZM'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ae' => :'Object',
        :'ar' => :'Object',
        :'at' => :'Object',
        :'au' => :'Object',
        :'ba' => :'Object',
        :'bb' => :'Object',
        :'be' => :'Object',
        :'bg' => :'Object',
        :'bo' => :'Object',
        :'br' => :'Object',
        :'bs' => :'Object',
        :'ca' => :'Object',
        :'ch' => :'Object',
        :'ci' => :'Object',
        :'cl' => :'Object',
        :'co' => :'Object',
        :'cr' => :'Object',
        :'cz' => :'Object',
        :'de' => :'Object',
        :'dk' => :'Object',
        :'_do' => :'Object',
        :'dz' => :'Object',
        :'ec' => :'Object',
        :'eg' => :'Object',
        :'es' => :'Object',
        :'fi' => :'Object',
        :'fr' => :'Object',
        :'gb' => :'Object',
        :'gf' => :'Object',
        :'gh' => :'Object',
        :'gq' => :'Object',
        :'gt' => :'Object',
        :'hk' => :'Object',
        :'hn' => :'Object',
        :'hr' => :'Object',
        :'hu' => :'Object',
        :'id' => :'Object',
        :'ie' => :'Object',
        :'il' => :'Object',
        :'iq' => :'Object',
        :'it' => :'Object',
        :'jm' => :'Object',
        :'jp' => :'Object',
        :'ke' => :'Object',
        :'kr' => :'Object',
        :'lb' => :'Object',
        :'ly' => :'Object',
        :'md' => :'Object',
        :'mk' => :'Object',
        :'mu' => :'Object',
        :'mx' => :'Object',
        :'my' => :'Object',
        :'mz' => :'Object',
        :'ne' => :'Object',
        :'ng' => :'Object',
        :'nl' => :'Object',
        :'no' => :'Object',
        :'nz' => :'Object',
        :'pa' => :'Object',
        :'pe' => :'Object',
        :'ph' => :'Object',
        :'pl' => :'Object',
        :'ps' => :'Object',
        :'pt' => :'Object',
        :'py' => :'Object',
        :'ro' => :'Object',
        :'rs' => :'Object',
        :'ru' => :'Object',
        :'sa' => :'Object',
        :'sc' => :'Object',
        :'se' => :'Object',
        :'sg' => :'Object',
        :'si' => :'Object',
        :'sk' => :'Object',
        :'sn' => :'Object',
        :'sv' => :'Object',
        :'th' => :'Object',
        :'tr' => :'Object',
        :'tt' => :'Object',
        :'tw' => :'Object',
        :'tz' => :'Object',
        :'ug' => :'Object',
        :'us' => :'Object',
        :'uy' => :'Object',
        :'ve' => :'Object',
        :'za' => :'Object',
        :'zm' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse200120Results` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse200120Results`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ae')
        self.ae = attributes[:'ae']
      end

      if attributes.key?(:'ar')
        self.ar = attributes[:'ar']
      end

      if attributes.key?(:'at')
        self.at = attributes[:'at']
      end

      if attributes.key?(:'au')
        self.au = attributes[:'au']
      end

      if attributes.key?(:'ba')
        self.ba = attributes[:'ba']
      end

      if attributes.key?(:'bb')
        self.bb = attributes[:'bb']
      end

      if attributes.key?(:'be')
        self.be = attributes[:'be']
      end

      if attributes.key?(:'bg')
        self.bg = attributes[:'bg']
      end

      if attributes.key?(:'bo')
        self.bo = attributes[:'bo']
      end

      if attributes.key?(:'br')
        self.br = attributes[:'br']
      end

      if attributes.key?(:'bs')
        self.bs = attributes[:'bs']
      end

      if attributes.key?(:'ca')
        self.ca = attributes[:'ca']
      end

      if attributes.key?(:'ch')
        self.ch = attributes[:'ch']
      end

      if attributes.key?(:'ci')
        self.ci = attributes[:'ci']
      end

      if attributes.key?(:'cl')
        self.cl = attributes[:'cl']
      end

      if attributes.key?(:'co')
        self.co = attributes[:'co']
      end

      if attributes.key?(:'cr')
        self.cr = attributes[:'cr']
      end

      if attributes.key?(:'cz')
        self.cz = attributes[:'cz']
      end

      if attributes.key?(:'de')
        self.de = attributes[:'de']
      end

      if attributes.key?(:'dk')
        self.dk = attributes[:'dk']
      end

      if attributes.key?(:'_do')
        self._do = attributes[:'_do']
      end

      if attributes.key?(:'dz')
        self.dz = attributes[:'dz']
      end

      if attributes.key?(:'ec')
        self.ec = attributes[:'ec']
      end

      if attributes.key?(:'eg')
        self.eg = attributes[:'eg']
      end

      if attributes.key?(:'es')
        self.es = attributes[:'es']
      end

      if attributes.key?(:'fi')
        self.fi = attributes[:'fi']
      end

      if attributes.key?(:'fr')
        self.fr = attributes[:'fr']
      end

      if attributes.key?(:'gb')
        self.gb = attributes[:'gb']
      end

      if attributes.key?(:'gf')
        self.gf = attributes[:'gf']
      end

      if attributes.key?(:'gh')
        self.gh = attributes[:'gh']
      end

      if attributes.key?(:'gq')
        self.gq = attributes[:'gq']
      end

      if attributes.key?(:'gt')
        self.gt = attributes[:'gt']
      end

      if attributes.key?(:'hk')
        self.hk = attributes[:'hk']
      end

      if attributes.key?(:'hn')
        self.hn = attributes[:'hn']
      end

      if attributes.key?(:'hr')
        self.hr = attributes[:'hr']
      end

      if attributes.key?(:'hu')
        self.hu = attributes[:'hu']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ie')
        self.ie = attributes[:'ie']
      end

      if attributes.key?(:'il')
        self.il = attributes[:'il']
      end

      if attributes.key?(:'iq')
        self.iq = attributes[:'iq']
      end

      if attributes.key?(:'it')
        self.it = attributes[:'it']
      end

      if attributes.key?(:'jm')
        self.jm = attributes[:'jm']
      end

      if attributes.key?(:'jp')
        self.jp = attributes[:'jp']
      end

      if attributes.key?(:'ke')
        self.ke = attributes[:'ke']
      end

      if attributes.key?(:'kr')
        self.kr = attributes[:'kr']
      end

      if attributes.key?(:'lb')
        self.lb = attributes[:'lb']
      end

      if attributes.key?(:'ly')
        self.ly = attributes[:'ly']
      end

      if attributes.key?(:'md')
        self.md = attributes[:'md']
      end

      if attributes.key?(:'mk')
        self.mk = attributes[:'mk']
      end

      if attributes.key?(:'mu')
        self.mu = attributes[:'mu']
      end

      if attributes.key?(:'mx')
        self.mx = attributes[:'mx']
      end

      if attributes.key?(:'my')
        self.my = attributes[:'my']
      end

      if attributes.key?(:'mz')
        self.mz = attributes[:'mz']
      end

      if attributes.key?(:'ne')
        self.ne = attributes[:'ne']
      end

      if attributes.key?(:'ng')
        self.ng = attributes[:'ng']
      end

      if attributes.key?(:'nl')
        self.nl = attributes[:'nl']
      end

      if attributes.key?(:'no')
        self.no = attributes[:'no']
      end

      if attributes.key?(:'nz')
        self.nz = attributes[:'nz']
      end

      if attributes.key?(:'pa')
        self.pa = attributes[:'pa']
      end

      if attributes.key?(:'pe')
        self.pe = attributes[:'pe']
      end

      if attributes.key?(:'ph')
        self.ph = attributes[:'ph']
      end

      if attributes.key?(:'pl')
        self.pl = attributes[:'pl']
      end

      if attributes.key?(:'ps')
        self.ps = attributes[:'ps']
      end

      if attributes.key?(:'pt')
        self.pt = attributes[:'pt']
      end

      if attributes.key?(:'py')
        self.py = attributes[:'py']
      end

      if attributes.key?(:'ro')
        self.ro = attributes[:'ro']
      end

      if attributes.key?(:'rs')
        self.rs = attributes[:'rs']
      end

      if attributes.key?(:'ru')
        self.ru = attributes[:'ru']
      end

      if attributes.key?(:'sa')
        self.sa = attributes[:'sa']
      end

      if attributes.key?(:'sc')
        self.sc = attributes[:'sc']
      end

      if attributes.key?(:'se')
        self.se = attributes[:'se']
      end

      if attributes.key?(:'sg')
        self.sg = attributes[:'sg']
      end

      if attributes.key?(:'si')
        self.si = attributes[:'si']
      end

      if attributes.key?(:'sk')
        self.sk = attributes[:'sk']
      end

      if attributes.key?(:'sn')
        self.sn = attributes[:'sn']
      end

      if attributes.key?(:'sv')
        self.sv = attributes[:'sv']
      end

      if attributes.key?(:'th')
        self.th = attributes[:'th']
      end

      if attributes.key?(:'tr')
        self.tr = attributes[:'tr']
      end

      if attributes.key?(:'tt')
        self.tt = attributes[:'tt']
      end

      if attributes.key?(:'tw')
        self.tw = attributes[:'tw']
      end

      if attributes.key?(:'tz')
        self.tz = attributes[:'tz']
      end

      if attributes.key?(:'ug')
        self.ug = attributes[:'ug']
      end

      if attributes.key?(:'us')
        self.us = attributes[:'us']
      end

      if attributes.key?(:'uy')
        self.uy = attributes[:'uy']
      end

      if attributes.key?(:'ve')
        self.ve = attributes[:'ve']
      end

      if attributes.key?(:'za')
        self.za = attributes[:'za']
      end

      if attributes.key?(:'zm')
        self.zm = attributes[:'zm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ae == o.ae &&
          ar == o.ar &&
          at == o.at &&
          au == o.au &&
          ba == o.ba &&
          bb == o.bb &&
          be == o.be &&
          bg == o.bg &&
          bo == o.bo &&
          br == o.br &&
          bs == o.bs &&
          ca == o.ca &&
          ch == o.ch &&
          ci == o.ci &&
          cl == o.cl &&
          co == o.co &&
          cr == o.cr &&
          cz == o.cz &&
          de == o.de &&
          dk == o.dk &&
          _do == o._do &&
          dz == o.dz &&
          ec == o.ec &&
          eg == o.eg &&
          es == o.es &&
          fi == o.fi &&
          fr == o.fr &&
          gb == o.gb &&
          gf == o.gf &&
          gh == o.gh &&
          gq == o.gq &&
          gt == o.gt &&
          hk == o.hk &&
          hn == o.hn &&
          hr == o.hr &&
          hu == o.hu &&
          id == o.id &&
          ie == o.ie &&
          il == o.il &&
          iq == o.iq &&
          it == o.it &&
          jm == o.jm &&
          jp == o.jp &&
          ke == o.ke &&
          kr == o.kr &&
          lb == o.lb &&
          ly == o.ly &&
          md == o.md &&
          mk == o.mk &&
          mu == o.mu &&
          mx == o.mx &&
          my == o.my &&
          mz == o.mz &&
          ne == o.ne &&
          ng == o.ng &&
          nl == o.nl &&
          no == o.no &&
          nz == o.nz &&
          pa == o.pa &&
          pe == o.pe &&
          ph == o.ph &&
          pl == o.pl &&
          ps == o.ps &&
          pt == o.pt &&
          py == o.py &&
          ro == o.ro &&
          rs == o.rs &&
          ru == o.ru &&
          sa == o.sa &&
          sc == o.sc &&
          se == o.se &&
          sg == o.sg &&
          si == o.si &&
          sk == o.sk &&
          sn == o.sn &&
          sv == o.sv &&
          th == o.th &&
          tr == o.tr &&
          tt == o.tt &&
          tw == o.tw &&
          tz == o.tz &&
          ug == o.ug &&
          us == o.us &&
          uy == o.uy &&
          ve == o.ve &&
          za == o.za &&
          zm == o.zm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ae, ar, at, au, ba, bb, be, bg, bo, br, bs, ca, ch, ci, cl, co, cr, cz, de, dk, _do, dz, ec, eg, es, fi, fr, gb, gf, gh, gq, gt, hk, hn, hr, hu, id, ie, il, iq, it, jm, jp, ke, kr, lb, ly, md, mk, mu, mx, my, mz, ne, ng, nl, no, nz, pa, pe, ph, pl, ps, pt, py, ro, rs, ru, sa, sc, se, sg, si, sk, sn, sv, th, tr, tt, tw, tz, ug, us, uy, ve, za, zm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
