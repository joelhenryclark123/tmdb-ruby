=begin
#TMDB API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.51
=end

require 'date'

module SwaggerClient
  class InlineResponse20090Certifications
    attr_accessor :au

    attr_accessor :bg

    attr_accessor :br

    attr_accessor :ca

    attr_accessor :ca_qc

    attr_accessor :de

    attr_accessor :dk

    attr_accessor :es

    attr_accessor :fi

    attr_accessor :fr

    attr_accessor :gb

    attr_accessor :hu

    attr_accessor :_in

    attr_accessor :it

    attr_accessor :lt

    attr_accessor :my

    attr_accessor :nl

    attr_accessor :no

    attr_accessor :nz

    attr_accessor :ph

    attr_accessor :pt

    attr_accessor :ru

    attr_accessor :se

    attr_accessor :us

    attr_accessor :kr

    attr_accessor :sk

    attr_accessor :th

    attr_accessor :mx

    attr_accessor :id

    attr_accessor :tr

    attr_accessor :ar

    attr_accessor :gr

    attr_accessor :tw

    attr_accessor :za

    attr_accessor :sg

    attr_accessor :ie

    attr_accessor :pr

    attr_accessor :jp

    attr_accessor :vi

    attr_accessor :ch

    attr_accessor :il

    attr_accessor :hk

    attr_accessor :mo

    attr_accessor :lv

    attr_accessor :lu

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'au' => :'AU',
        :'bg' => :'BG',
        :'br' => :'BR',
        :'ca' => :'CA',
        :'ca_qc' => :'CA-QC',
        :'de' => :'DE',
        :'dk' => :'DK',
        :'es' => :'ES',
        :'fi' => :'FI',
        :'fr' => :'FR',
        :'gb' => :'GB',
        :'hu' => :'HU',
        :'_in' => :'IN',
        :'it' => :'IT',
        :'lt' => :'LT',
        :'my' => :'MY',
        :'nl' => :'NL',
        :'no' => :'NO',
        :'nz' => :'NZ',
        :'ph' => :'PH',
        :'pt' => :'PT',
        :'ru' => :'RU',
        :'se' => :'SE',
        :'us' => :'US',
        :'kr' => :'KR',
        :'sk' => :'SK',
        :'th' => :'TH',
        :'mx' => :'MX',
        :'id' => :'ID',
        :'tr' => :'TR',
        :'ar' => :'AR',
        :'gr' => :'GR',
        :'tw' => :'TW',
        :'za' => :'ZA',
        :'sg' => :'SG',
        :'ie' => :'IE',
        :'pr' => :'PR',
        :'jp' => :'JP',
        :'vi' => :'VI',
        :'ch' => :'CH',
        :'il' => :'IL',
        :'hk' => :'HK',
        :'mo' => :'MO',
        :'lv' => :'LV',
        :'lu' => :'LU'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'au' => :'Object',
        :'bg' => :'Object',
        :'br' => :'Object',
        :'ca' => :'Object',
        :'ca_qc' => :'Object',
        :'de' => :'Object',
        :'dk' => :'Object',
        :'es' => :'Object',
        :'fi' => :'Object',
        :'fr' => :'Object',
        :'gb' => :'Object',
        :'hu' => :'Object',
        :'_in' => :'Object',
        :'it' => :'Object',
        :'lt' => :'Object',
        :'my' => :'Object',
        :'nl' => :'Object',
        :'no' => :'Object',
        :'nz' => :'Object',
        :'ph' => :'Object',
        :'pt' => :'Object',
        :'ru' => :'Object',
        :'se' => :'Object',
        :'us' => :'Object',
        :'kr' => :'Object',
        :'sk' => :'Object',
        :'th' => :'Object',
        :'mx' => :'Object',
        :'id' => :'Object',
        :'tr' => :'Object',
        :'ar' => :'Object',
        :'gr' => :'Object',
        :'tw' => :'Object',
        :'za' => :'Object',
        :'sg' => :'Object',
        :'ie' => :'Object',
        :'pr' => :'Object',
        :'jp' => :'Object',
        :'vi' => :'Object',
        :'ch' => :'Object',
        :'il' => :'Object',
        :'hk' => :'Object',
        :'mo' => :'Object',
        :'lv' => :'Object',
        :'lu' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::InlineResponse20090Certifications` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::InlineResponse20090Certifications`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'au')
        self.au = attributes[:'au']
      end

      if attributes.key?(:'bg')
        self.bg = attributes[:'bg']
      end

      if attributes.key?(:'br')
        self.br = attributes[:'br']
      end

      if attributes.key?(:'ca')
        self.ca = attributes[:'ca']
      end

      if attributes.key?(:'ca_qc')
        self.ca_qc = attributes[:'ca_qc']
      end

      if attributes.key?(:'de')
        self.de = attributes[:'de']
      end

      if attributes.key?(:'dk')
        self.dk = attributes[:'dk']
      end

      if attributes.key?(:'es')
        self.es = attributes[:'es']
      end

      if attributes.key?(:'fi')
        self.fi = attributes[:'fi']
      end

      if attributes.key?(:'fr')
        self.fr = attributes[:'fr']
      end

      if attributes.key?(:'gb')
        self.gb = attributes[:'gb']
      end

      if attributes.key?(:'hu')
        self.hu = attributes[:'hu']
      end

      if attributes.key?(:'_in')
        self._in = attributes[:'_in']
      end

      if attributes.key?(:'it')
        self.it = attributes[:'it']
      end

      if attributes.key?(:'lt')
        self.lt = attributes[:'lt']
      end

      if attributes.key?(:'my')
        self.my = attributes[:'my']
      end

      if attributes.key?(:'nl')
        self.nl = attributes[:'nl']
      end

      if attributes.key?(:'no')
        self.no = attributes[:'no']
      end

      if attributes.key?(:'nz')
        self.nz = attributes[:'nz']
      end

      if attributes.key?(:'ph')
        self.ph = attributes[:'ph']
      end

      if attributes.key?(:'pt')
        self.pt = attributes[:'pt']
      end

      if attributes.key?(:'ru')
        self.ru = attributes[:'ru']
      end

      if attributes.key?(:'se')
        self.se = attributes[:'se']
      end

      if attributes.key?(:'us')
        self.us = attributes[:'us']
      end

      if attributes.key?(:'kr')
        self.kr = attributes[:'kr']
      end

      if attributes.key?(:'sk')
        self.sk = attributes[:'sk']
      end

      if attributes.key?(:'th')
        self.th = attributes[:'th']
      end

      if attributes.key?(:'mx')
        self.mx = attributes[:'mx']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'tr')
        self.tr = attributes[:'tr']
      end

      if attributes.key?(:'ar')
        self.ar = attributes[:'ar']
      end

      if attributes.key?(:'gr')
        self.gr = attributes[:'gr']
      end

      if attributes.key?(:'tw')
        self.tw = attributes[:'tw']
      end

      if attributes.key?(:'za')
        self.za = attributes[:'za']
      end

      if attributes.key?(:'sg')
        self.sg = attributes[:'sg']
      end

      if attributes.key?(:'ie')
        self.ie = attributes[:'ie']
      end

      if attributes.key?(:'pr')
        self.pr = attributes[:'pr']
      end

      if attributes.key?(:'jp')
        self.jp = attributes[:'jp']
      end

      if attributes.key?(:'vi')
        self.vi = attributes[:'vi']
      end

      if attributes.key?(:'ch')
        self.ch = attributes[:'ch']
      end

      if attributes.key?(:'il')
        self.il = attributes[:'il']
      end

      if attributes.key?(:'hk')
        self.hk = attributes[:'hk']
      end

      if attributes.key?(:'mo')
        self.mo = attributes[:'mo']
      end

      if attributes.key?(:'lv')
        self.lv = attributes[:'lv']
      end

      if attributes.key?(:'lu')
        self.lu = attributes[:'lu']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          au == o.au &&
          bg == o.bg &&
          br == o.br &&
          ca == o.ca &&
          ca_qc == o.ca_qc &&
          de == o.de &&
          dk == o.dk &&
          es == o.es &&
          fi == o.fi &&
          fr == o.fr &&
          gb == o.gb &&
          hu == o.hu &&
          _in == o._in &&
          it == o.it &&
          lt == o.lt &&
          my == o.my &&
          nl == o.nl &&
          no == o.no &&
          nz == o.nz &&
          ph == o.ph &&
          pt == o.pt &&
          ru == o.ru &&
          se == o.se &&
          us == o.us &&
          kr == o.kr &&
          sk == o.sk &&
          th == o.th &&
          mx == o.mx &&
          id == o.id &&
          tr == o.tr &&
          ar == o.ar &&
          gr == o.gr &&
          tw == o.tw &&
          za == o.za &&
          sg == o.sg &&
          ie == o.ie &&
          pr == o.pr &&
          jp == o.jp &&
          vi == o.vi &&
          ch == o.ch &&
          il == o.il &&
          hk == o.hk &&
          mo == o.mo &&
          lv == o.lv &&
          lu == o.lu
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [au, bg, br, ca, ca_qc, de, dk, es, fi, fr, gb, hu, _in, it, lt, my, nl, no, nz, ph, pt, ru, se, us, kr, sk, th, mx, id, tr, ar, gr, tw, za, sg, ie, pr, jp, vi, ch, il, hk, mo, lv, lu].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
