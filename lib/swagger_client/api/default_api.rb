=begin
#TMDB API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.51
=end

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Favorite Movies
    # Get a user's list of favourite movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20011]
    def account_favorite_movies(account_object_id, opts = {})
      data, _status_code, _headers = account_favorite_movies_with_http_info(account_object_id, opts)
      data
    end

    # Favorite Movies
    # Get a user&#x27;s list of favourite movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def account_favorite_movies_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_favorite_movies ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_favorite_movies"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/favorites'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20011' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_favorite_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Favorite TV Shows
    # Get a user's list of favourite TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20012]
    def account_favorite_tv(account_object_id, opts = {})
      data, _status_code, _headers = account_favorite_tv_with_http_info(account_object_id, opts)
      data
    end

    # Favorite TV Shows
    # Get a user&#x27;s list of favourite TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20012, Integer, Hash)>] InlineResponse20012 data, response status code and response headers
    def account_favorite_tv_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_favorite_tv ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_favorite_tv"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/favorites'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20012' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_favorite_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists
    # Get all of the lists you've created.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse20010]
    def account_lists(account_object_id, opts = {})
      data, _status_code, _headers = account_lists_with_http_info(account_object_id, opts)
      data
    end

    # Lists
    # Get all of the lists you&#x27;ve created.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def account_lists_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_lists ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_lists"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/lists'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20010' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recommended Movies
    # Get a user's list of recommended movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20014]
    def account_movie_recommendations(account_object_id, opts = {})
      data, _status_code, _headers = account_movie_recommendations_with_http_info(account_object_id, opts)
      data
    end

    # Recommended Movies
    # Get a user&#x27;s list of recommended movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def account_movie_recommendations_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_movie_recommendations ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_movie_recommendations"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/recommendations'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20014' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_movie_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Watchlist Movies
    # Get a user's movie watchlist.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20014]
    def account_movie_watchlist(account_object_id, opts = {})
      data, _status_code, _headers = account_movie_watchlist_with_http_info(account_object_id, opts)
      data
    end

    # Watchlist Movies
    # Get a user&#x27;s movie watchlist.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def account_movie_watchlist_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_movie_watchlist ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_movie_watchlist"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/watchlist'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20014' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_movie_watchlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rated Movies
    # Get a user's rated movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20015]
    def account_rated_movies(account_object_id, opts = {})
      data, _status_code, _headers = account_rated_movies_with_http_info(account_object_id, opts)
      data
    end

    # Rated Movies
    # Get a user&#x27;s rated movies.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20015, Integer, Hash)>] InlineResponse20015 data, response status code and response headers
    def account_rated_movies_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_movies ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_rated_movies"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/movie/rated'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20015' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_movies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rated TV Shows
    # Get a user's rated TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20016]
    def account_rated_tv(account_object_id, opts = {})
      data, _status_code, _headers = account_rated_tv_with_http_info(account_object_id, opts)
      data
    end

    # Rated TV Shows
    # Get a user&#x27;s rated TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def account_rated_tv_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_rated_tv ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_rated_tv"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/rated'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20016' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_rated_tv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Recommended TV Shows
    # Get a user's list of recommended TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20013]
    def account_tv_recommendations(account_object_id, opts = {})
      data, _status_code, _headers = account_tv_recommendations_with_http_info(account_object_id, opts)
      data
    end

    # Recommended TV Shows
    # Get a user&#x27;s list of recommended TV shows.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def account_tv_recommendations_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_tv_recommendations ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_tv_recommendations"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/recommendations'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20013' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_tv_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Watchlist TV Shows
    # Get a user's TV watchlist.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page  (default to 1)
    # @option opts [] :language  (default to en-US)
    # @return [InlineResponse20013]
    def account_tv_watchlist(account_object_id, opts = {})
      data, _status_code, _headers = account_tv_watchlist_with_http_info(account_object_id, opts)
      data
    end

    # Watchlist TV Shows
    # Get a user&#x27;s TV watchlist.
    # @param account_object_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :page 
    # @option opts [] :language 
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def account_tv_watchlist_with_http_info(account_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.account_tv_watchlist ...'
      end
      # verify the required parameter 'account_object_id' is set
      if @api_client.config.client_side_validation && account_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_object_id' when calling DefaultApi.account_tv_watchlist"
      end
      # resource path
      local_var_path = '/4/account/{account_object_id}/tv/watchlist'.sub('{' + 'account_object_id' + '}', account_object_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20013' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#account_tv_watchlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Access Token
    # @param [Hash] opts the optional parameters
    # @option opts [AuthAccessTokenBody] :body 
    # @return [InlineResponse2001]
    def auth_create_access_token(opts = {})
      data, _status_code, _headers = auth_create_access_token_with_http_info(opts)
      data
    end

    # Create Access Token
    # @param [Hash] opts the optional parameters
    # @option opts [AuthAccessTokenBody] :body 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def auth_create_access_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_create_access_token ...'
      end
      # resource path
      local_var_path = '/4/auth/access_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_create_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Request Token
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestTokenBody] :body 
    # @return [InlineResponse200]
    def auth_create_request_token(opts = {})
      data, _status_code, _headers = auth_create_request_token_with_http_info(opts)
      data
    end

    # Create Request Token
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestTokenBody] :body 
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def auth_create_request_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_create_request_token ...'
      end
      # resource path
      local_var_path = '/4/auth/request_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_create_request_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Logout
    # Log out of a session.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthAccessTokenBody1] :body 
    # @return [InlineResponse2002]
    def auth_logout(opts = {})
      data, _status_code, _headers = auth_logout_with_http_info(opts)
      data
    end

    # Logout
    # Log out of a session.
    # @param [Hash] opts the optional parameters
    # @option opts [AuthAccessTokenBody1] :body 
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def auth_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.auth_logout ...'
      end
      # resource path
      local_var_path = '/4/auth/access_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#auth_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Items
    # Add items to a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody1] :body 
    # @return [InlineResponse2008]
    def list_add_items(list_id, opts = {})
      data, _status_code, _headers = list_add_items_with_http_info(list_id, opts)
      data
    end

    # Add Items
    # Add items to a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody1] :body 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def list_add_items_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_add_items ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_add_items"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/items'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_add_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clear
    # Clear all of the items on a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def list_clear(list_id, opts = {})
      data, _status_code, _headers = list_clear_with_http_info(list_id, opts)
      data
    end

    # Clear
    # Clear all of the items on a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def list_clear_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_clear ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_clear"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/clear'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2006' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_clear\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create
    # Create a new list.
    # @param [Hash] opts the optional parameters
    # @option opts [Model4ListBody] :body 
    # @return [InlineResponse2005]
    def list_create(opts = {})
      data, _status_code, _headers = list_create_with_http_info(opts)
      data
    end

    # Create
    # Create a new list.
    # @param [Hash] opts the optional parameters
    # @option opts [Model4ListBody] :body 
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def list_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_create ...'
      end
      # resource path
      local_var_path = '/4/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete
    # Delete a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def list_delete(list_id, opts = {})
      data, _status_code, _headers = list_delete_with_http_info(list_id, opts)
      data
    end

    # Delete
    # Delete a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def list_delete_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_delete ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_delete"
      end
      # resource path
      local_var_path = '/4/{list_id}'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Details
    # Retrieve a list by id.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :language  (default to en-US)
    # @option opts [] :page  (default to 1)
    # @return [InlineResponse2003]
    def list_details(list_id, opts = {})
      data, _status_code, _headers = list_details_with_http_info(list_id, opts)
      data
    end

    # Details
    # Retrieve a list by id.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [] :language 
    # @option opts [] :page 
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def list_details_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_details ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_details"
      end
      # resource path
      local_var_path = '/4/list/{list_id}'.sub('{' + '{list_id}' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2003' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Item Status
    # Check if an item is on a list.
    # @param list_id 
    # @param media_id 
    # @param media_type 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def list_item_status(list_id, media_id, media_type, opts = {})
      data, _status_code, _headers = list_item_status_with_http_info(list_id, media_id, media_type, opts)
      data
    end

    # Item Status
    # Check if an item is on a list.
    # @param list_id 
    # @param media_id 
    # @param media_type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def list_item_status_with_http_info(list_id, media_id, media_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_item_status ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_item_status"
      end
      # verify the required parameter 'media_id' is set
      if @api_client.config.client_side_validation && media_id.nil?
        fail ArgumentError, "Missing the required parameter 'media_id' when calling DefaultApi.list_item_status"
      end
      # verify the required parameter 'media_type' is set
      if @api_client.config.client_side_validation && media_type.nil?
        fail ArgumentError, "Missing the required parameter 'media_type' when calling DefaultApi.list_item_status"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/item_status'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'media_id'] = media_id
      query_params[:'media_type'] = media_type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2009' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_item_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Items
    # Remove items from a list
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody2] :body 
    # @return [InlineResponse2007]
    def list_remove_items(list_id, opts = {})
      data, _status_code, _headers = list_remove_items_with_http_info(list_id, opts)
      data
    end

    # Remove Items
    # Remove items from a list
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody2] :body 
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def list_remove_items_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_remove_items ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_remove_items"
      end
      # resource path
      local_var_path = '/4/list/{list_id}/items'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2007' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_remove_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update
    # Update the details of a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListListIdBody] :body 
    # @return [InlineResponse2004]
    def list_update(list_id, opts = {})
      data, _status_code, _headers = list_update_with_http_info(list_id, opts)
      data
    end

    # Update
    # Update the details of a list.
    # @param list_id 
    # @param [Hash] opts the optional parameters
    # @option opts [ListListIdBody] :body 
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def list_update_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_update ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling DefaultApi.list_update"
      end
      # resource path
      local_var_path = '/4/list/{list_id}'.sub('{' + 'list_id' + '}', list_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2004' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Items
    # Update an individual item on a list
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody] :body 
    # @return [InlineResponse2007]
    def list_update_items(opts = {})
      data, _status_code, _headers = list_update_items_with_http_info(opts)
      data
    end

    # Update Items
    # Update an individual item on a list
    # @param [Hash] opts the optional parameters
    # @option opts [ListIdItemsBody] :body 
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def list_update_items_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_update_items ...'
      end
      # resource path
      local_var_path = '/4/list/{list_id}/items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InlineResponse2007' 

      auth_names = opts[:auth_names] || ['sec0']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_update_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
